name: ML Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-model-architecture:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision matplotlib numpy
        
    - name: Display Model Summary
      run: |
        echo "Model Architecture Summary"
        echo "========================="
        python -c "
        import torch
        import torch.nn as nn
        import torch.nn.functional as F
        
        class Net(nn.Module):
            def __init__(self):
                super(Net, self).__init__()
                self.conv1 = nn.Conv2d(1, 8, kernel_size=3, padding=1)
                self.bn1 = nn.BatchNorm2d(8)
                self.conv2 = nn.Conv2d(8, 12, kernel_size=3, padding=1)
                self.bn2 = nn.BatchNorm2d(12)
                self.conv3 = nn.Conv2d(12, 12, kernel_size=3, padding=1)
                self.bn3 = nn.BatchNorm2d(12)
                self.pool = nn.MaxPool2d(2,2)
                self.antman1 = nn.Conv2d(12, 8, kernel_size=1)
                self.conv4 = nn.Conv2d(8, 12, kernel_size=3, padding=1)
                self.bn4 = nn.BatchNorm2d(12)
                self.conv5 = nn.Conv2d(12, 12, kernel_size=3, padding=1)
                self.bn5 = nn.BatchNorm2d(12)
                self.pool2 = nn.MaxPool2d(2,2)
                self.antman2 = nn.Conv2d(12, 8, kernel_size=1)
                self.conv5addon = nn.Conv2d(8, 12, kernel_size=3, padding=1)
                self.bn5addon = nn.BatchNorm2d(12)
                self.conv6 = nn.Conv2d(12, 12, kernel_size=3, padding=1)
                self.fc1 = nn.Linear(12*7*7, 16)
                self.dropout = nn.Dropout(0.05)
                self.fc2 = nn.Linear(16, 10)
            
            def forward(self, x):
                x = F.relu(self.bn1(self.conv1(x)))
                x = F.relu(self.bn2(self.conv2(x)))
                x = self.pool(F.relu(self.bn3(self.conv3(x))))
                x = self.antman1(x)
                x = F.relu(self.bn4(self.conv4(x)))
                x = self.pool(F.relu(self.bn5(self.conv5(x))))
                x = self.antman2(x)
                x = F.relu(self.bn5addon(self.conv5addon(x)))
                x = self.conv6(x)
                x = x.view(x.size(0), -1)
                x = self.fc1(x)
                x = self.dropout(x)
                x = self.fc2(x)
                return F.log_softmax(x, dim=1)
        
        model = Net()
        total_params = sum(p.numel() for p in model.parameters())
        trainable_params = sum(p.numel() for p in model.parameters() if p.requires_grad)
        print(f'Total Parameters: {total_params:,}')
        print(f'Trainable Parameters: {trainable_params:,}')
        print(f'Batch Normalization Layers: 5')
        print(f'Dropout Layers: 1')
        print(f'Fully Connected Layers: 2')
        print(f'GAP Usage: No')
        "
        echo "========================="
        
    - name: Run model training and testing
      timeout-minutes: 15
      run: |
        echo "Running Model Training and Testing..."
        echo "===================================="
        python basic_dnn_mnist.py
        echo "===================================="
