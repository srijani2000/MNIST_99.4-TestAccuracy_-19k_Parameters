name: Run MNIST Model Training and Testing

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  run-model:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision matplotlib numpy
        
    - name: Run model parameter count
      run: |
        python -c "
        import torch
        import torch.nn as nn
        import torch.nn.functional as F
        
        class Net(nn.Module):
            def __init__(self):
                super(Net, self).__init__()
                self.conv1 = nn.Conv2d(1, 8, kernel_size=3, padding=1)
                self.bn1 = nn.BatchNorm2d(8)
                self.conv2 = nn.Conv2d(8, 12, kernel_size=3, padding=1)
                self.bn2 = nn.BatchNorm2d(12)
                self.conv3 = nn.Conv2d(12, 12, kernel_size=3, padding=1)
                self.bn3 = nn.BatchNorm2d(12)
                self.pool = nn.MaxPool2d(2,2)
                self.antman1 = nn.Conv2d(12, 8, kernel_size=1)
                self.conv4 = nn.Conv2d(8, 12, kernel_size=3, padding=1)
                self.bn4 = nn.BatchNorm2d(12)
                self.conv5 = nn.Conv2d(12, 12, kernel_size=3, padding=1)
                self.bn5 = nn.BatchNorm2d(12)
                self.pool2 = nn.MaxPool2d(2,2)
                self.antman2 = nn.Conv2d(12, 8, kernel_size=1)
                self.conv5addon = nn.Conv2d(8, 12, kernel_size=3, padding=1)
                self.bn5addon = nn.BatchNorm2d(12)
                self.conv6 = nn.Conv2d(12, 12, kernel_size=3, padding=1)
                self.fc1 = nn.Linear(12*7*7, 16)
                self.dropout = nn.Dropout(0.05)
                self.fc2 = nn.Linear(16, 10)
        
        model = Net()
        total_params = sum(p.numel() for p in model.parameters() if p.requires_grad)
        print(f'🔢 Total Parameters: {total_params:,}')
        print(f'📊 Batch Normalization Layers: 5')
        print(f'🎯 Dropout Layers: 1')
        print(f'🔗 Fully Connected Layers: 2')
        print(f'🌐 GAP Usage: No')
        "
        
    - name: Run model training and testing
      run: |
        echo "🚀 Starting Model Training and Testing..."
        python basic_dnn_mnist.py
        
    - name: Generate test results summary
      run: |
        echo "📈 Model Analysis Complete!"
        echo "✅ Training completed successfully"
        echo "📊 Check the logs above for detailed results"
        
    - name: Upload results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: model-results
        path: |
          *.json
          *.txt
          *.log
